// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd
#Использовать gitrunner
#Использовать asserts
#Использовать tempfiles

#Использовать "../../src/core"

Перем БДД; //контекст фреймворка 1bdd

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯУстанавливаюПутьВыполненияКомандыКТекущейБиблиотеке");
	ВсеШаги.Добавить("ЯСохраняюЗначениеВременногоКаталогаВПеременной");
	ВсеШаги.Добавить("ЯДобавляюПозиционныйПараметрДляКомандыИзПеременной");
	ВсеШаги.Добавить("ЯДобавляюПараметрДляКомандыИзПеременной");
	ВсеШаги.Добавить("ЯДобавляюПараметрыДляКоманды");
	ВсеШаги.Добавить("ЯСоздаюНовыйОбъектГитрепозиторий");
	ВсеШаги.Добавить("ЯУстанавливаюРабочейКаталогВоВременныйКаталог");
	ВсеШаги.Добавить("ЯИнициализируюРепозиторийВКаталогеИзПеременной");
	ВсеШаги.Добавить("ВКаталогеИзПеременнойСоздаетсяФайлИлиКаталог");
	ВсеШаги.Добавить("ВКаталогеИзПеременнойНеСоздаетсяФайлИлиКаталог");
	ВсеШаги.Добавить("ЯОчищаюЗначениеПеременныхОкружения");

	ВсеШаги.Добавить("ЯНаполняюВременныйКаталогДаннымиТестовогоПримера");
	ВсеШаги.Добавить("ЯДелаюКоммит");
	ВсеШаги.Добавить("ЯДобавляюФайлВКаталогПроектаССодержанием");

	Возврат ВсеШаги;

КонецФункции

Функция ИмяЛога() Экспорт
	Возврат "bdd.ocra.feature";
КонецФункции


// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
	// ЯСоздаюНовыйОбъектГитрепозиторий()
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт
	ВременныеФайлы.Удалить();
КонецПроцедуры

//Я инициализирую репозиторий в каталоге из переменной "ПутьКаталогаИсходников"
Процедура ЯИнициализируюРепозиторийВКаталогеИзПеременной(Знач ПутьКаталогаИсходников) Экспорт
	ГитРепозиторий = БДД.ПолучитьИзКонтекста("ГитРепозиторий");
	ВременныйКаталог = БДД.ПолучитьИзКонтекста(ПутьКаталогаИсходников);
	ГитРепозиторий.УстановитьРабочийКаталог(ВременныйКаталог);

	ГитРепозиторий.Инициализировать();

КонецПроцедуры

//Я устанавливаю рабочей каталог во временный каталог
Процедура ЯУстанавливаюРабочейКаталогВоВременныйКаталог() Экспорт
	УстановитьТекущийКаталог(ВременныеФайлы.СоздатьКаталог());
КонецПроцедуры


//Я создаю новый объект ГитРепозиторий
Процедура ЯСоздаюНовыйОбъектГитрепозиторий() Экспорт
	ГитРепозиторий = Новый ГитРепозиторий;
	БДД.СохранитьВКонтекст("ГитРепозиторий", ГитРепозиторий);
КонецПроцедуры

//Я сохраняю значение временного каталога в переменной "URLРепозитория"
Процедура ЯСохраняюЗначениеВременногоКаталогаВПеременной(Знач ИмяПеременной) Экспорт
	ВременныйКаталог = БДД.ПолучитьИзКонтекста("ВременныйКаталог");
	БДД.СохранитьВКонтекст(ИмяПеременной, ВременныйКаталог);
КонецПроцедуры



//Я добавляю позиционный параметр для команды "gitsync" из переменной "URLРепозитория"
Процедура ЯДобавляюПозиционныйПараметрДляКомандыИзПеременной(Знач ИмяКоманды, Знач ИмяПеременной) Экспорт

	Команда = БДД.ПолучитьИзКонтекста(КлючКоманды(ИмяКоманды));
	ЗначениеПеременной = БДД.ПолучитьИзКонтекста(ИмяПеременной);
	
	Команда.ДобавитьПараметр(ЗначениеПеременной);

КонецПроцедуры

//Я добавляю параметр "-tmpdir" для команды "gitsync" из переменной "ВременнаяДиректория"
Процедура ЯДобавляюПараметрДляКомандыИзПеременной(Знач Параметр, Знач ИмяКоманды, Знач ИмяПеременной) Экспорт
	Команда = БДД.ПолучитьИзКонтекста(КлючКоманды(ИмяКоманды));
	ЗначениеПеременной = БДД.ПолучитьИзКонтекста(ИмяПеременной);
	Команда.ДобавитьПараметр(СтрШаблон("%1 %2", Параметр, ЗначениеПеременной))
КонецПроцедуры

//Я устанавливаю путь выполнения команды "gitsync" к текущей библиотеке
Процедура ЯУстанавливаюПутьВыполненияКомандыКТекущейБиблиотеке(Знач ИмяКоманды) Экспорт
	
	ПутьГитсинк = ОбъединитьПути(КаталогПриложения(), "src", "cmd", "orca.os");
	Команда = БДД.ПолучитьИзКонтекста(КлючКоманды(ИмяКоманды));
	Команда.УстановитьКоманду("oscript");
	Команда.ДобавитьПараметр("-encoding=utf-8");
	Команда.ДобавитьПараметр(ОбернутьВКавычки(ПутьГитсинк));
	
КонецПроцедуры


//Я добавляю параметры для команды "gitsync"
//|--storage-user Администратор|
//|-useVendorUnload|
Процедура ЯДобавляюПараметрыДляКоманды(Знач ИмяКоманды, Знач ТаблицаПараметров) Экспорт
	
	Команда = БДД.ПолучитьИзКонтекста(КлючКоманды(ИмяКоманды));
	Для Каждого Параметр из ТаблицаПараметров Цикл
		Команда.ДобавитьПараметр(Параметр[0])
	КонецЦикла

КонецПроцедуры

//В каталоге из переменной "ПутьКаталогаИсходников" создается файл или каталог "AUTHORS"
Процедура ВКаталогеИзПеременнойСоздаетсяФайлИлиКаталог(Знач ПутьКаталогаИсходников, Знач ИмяФайла) Экспорт
	
	ВременныйКаталог = БДД.ПолучитьИзКонтекста(ПутьКаталогаИсходников);
	ИскомыйФайл = Новый Файл(ОбъединитьПути(ВременныйКаталог, ИмяФайла));
	Ожидаем.Что(ИскомыйФайл.Существует(), "Файл должен был существовать").ЭтоИстина();

КонецПроцедуры

//В каталоге из переменной "ПутьКаталогаИсходников" не создается файл или каталог ".git"
Процедура ВКаталогеИзПеременнойНеСоздаетсяФайлИлиКаталог(Знач ПутьКаталогаИсходников, Знач ИмяФайла) Экспорт
	ВременныйКаталог = БДД.ПолучитьИзКонтекста(ПутьКаталогаИсходников);
	ИскомыйФайл = Новый Файл(ОбъединитьПути(ВременныйКаталог, ИмяФайла));
	Ожидаем.Что(ИскомыйФайл.Существует(), "Файл не должен был существовать").ЭтоЛожь();
КонецПроцедуры

//Я очищаю значение переменных окружения
//|GITSYNC_STORAGE_PATH|
//|GITSYNC_WORKDIR|
Процедура ЯОчищаюЗначениеПеременныхОкружения(Знач ПарамТаблица1) Экспорт
	Для каждого Переменная Из ПарамТаблица1 Цикл
		УстановитьПеременнуюСреды(Переменная[0], "");
	КонецЦикла;
КонецПроцедуры

//Я наполняю временный каталог данными тестового примера
Процедура ЯНаполняюВременныйКаталогДаннымиТестовогоПримера() Экспорт


КонецПроцедуры

//Я делаю коммит "Первичное заполнение"
Процедура ЯДелаюКоммит(Знач ТекстКоммита) Экспорт

	ГитРепозиторий = БДД.ПолучитьИзКонтекста("ГитРепозиторий");
	ВременныйКаталог = БДД.ПолучитьИзКонтекста("КаталогПроекта");
	ГитРепозиторий.УстановитьРабочийКаталог(ВременныйКаталог);
	ГитРепозиторий.ВыполнитьКоманду(СтрРазделить("add --all", " "));

	ГитРепозиторий.Закоммитить(ТекстКоммита, Истина);

КонецПроцедуры

//Я добавляю файл ".orca.yaml" в каталог проекта с содержанием "
//|ИмяПроекта: &app_name test-app
//|
//|build:
//|  binary: *app_name
//|
//|checksum:
//|  name_template: '{{ .ProjectName }}_checksums.txt'
//|changelog:
//|  filters:
//|    exclude:
//|      - '^docs:'
//|      - '^test:'
//|      - Merge pull request
//|      - Merge branch
//|  sort: asc
Процедура ЯДобавляюФайлВКаталогПроектаССодержанием(Знач ИмяФайла, Знач ТекстФайла) Экспорт
	
	КаталогПроекта = БДД.ПолучитьИзКонтекста("КаталогПроекта");
	ФайлНастроек = Новый ЗаписьТекста;
	ФайлНастроек.Открыть(ОбъединитьПути(КаталогПроекта, ИмяФайла), "utf-8");
	ФайлНастроек.ЗаписатьСтроку(ТекстФайла);
	ФайлНастроек.Закрыть();

КонецПроцедуры

Функция КаталогFixtures()
	Возврат ОбъединитьПути(КаталогПриложения(), "tests", "fixtures");
КонецФункции

Функция КаталогПриложения()
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..", "..");
КонецФункции

Функция ОбернутьВКавычки(Знач Строка);
	Возврат """" + Строка + """";
КонецФункции

Функция КлючКоманды(Знач ИмяКоманды)
	Возврат "Команда-" + ИмяКоманды;
КонецФункции

Лог = Логирование.ПолучитьЛог(ИмяЛога());
//Лог.УстановитьУровень(Логирование.ПолучитьЛог("bdd").Уровень());
Лог.УстановитьУровень(УровниЛога.Отладка);
